// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mean_my_vec_c
arma::rowvec mean_my_vec_c(const arma::mat& x);
RcppExport SEXP _GDPSamp_mean_my_vec_c(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_my_vec_c(x));
    return rcpp_result_gen;
END_RCPP
}
// ss_my_c
arma::mat ss_my_c(const arma::mat& x);
RcppExport SEXP _GDPSamp_ss_my_c(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ss_my_c(x));
    return rcpp_result_gen;
END_RCPP
}
// sample_mu_tau_c
Rcpp::List sample_mu_tau_c(const arma::mat& data, const arma::vec& z, const int& L, const int& nu, const arma::mat& W, const arma::colvec& prior_mean, const double& prior_prec);
RcppExport SEXP _GDPSamp_sample_mu_tau_c(SEXP dataSEXP, SEXP zSEXP, SEXP LSEXP, SEXP nuSEXP, SEXP WSEXP, SEXP prior_meanSEXP, SEXP prior_precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type prior_mean(prior_meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type prior_prec(prior_precSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_mu_tau_c(data, z, L, nu, W, prior_mean, prior_prec));
    return rcpp_result_gen;
END_RCPP
}
// Mahalanobis
arma::vec Mahalanobis(arma::mat x, arma::rowvec center, arma::mat cov);
RcppExport SEXP _GDPSamp_Mahalanobis(SEXP xSEXP, SEXP centerSEXP, SEXP covSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type center(centerSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cov(covSEXP);
    rcpp_result_gen = Rcpp::wrap(Mahalanobis(x, center, cov));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm_my
arma::vec dmvnorm_my(arma::mat x, arma::mat mean, arma::mat sigma, bool log);
RcppExport SEXP _GDPSamp_dmvnorm_my(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_my(x, mean, sigma, log));
    return rcpp_result_gen;
END_RCPP
}
// multi_normal
arma::mat multi_normal(const arma::mat& data, const int& L, const arma::mat& mu, const arma::cube& tau, const bool& log_prob);
RcppExport SEXP _GDPSamp_multi_normal(SEXP dataSEXP, SEXP LSEXP, SEXP muSEXP, SEXP tauSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(multi_normal(data, L, mu, tau, log_prob));
    return rcpp_result_gen;
END_RCPP
}
// sample_my
Rcpp::IntegerVector sample_my(const arma::mat& prob);
RcppExport SEXP _GDPSamp_sample_my(SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_my(prob));
    return rcpp_result_gen;
END_RCPP
}
// sample_z_c
Rcpp::IntegerVector sample_z_c(const arma::mat& data, const arma::vec& beta, const int& L, const arma::mat& mu, const arma::cube& tau);
RcppExport SEXP _GDPSamp_sample_z_c(SEXP dataSEXP, SEXP betaSEXP, SEXP LSEXP, SEXP muSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_z_c(data, beta, L, mu, tau));
    return rcpp_result_gen;
END_RCPP
}
// prob
arma::mat prob(const arma::mat& data, const arma::vec& beta, const int& L, const arma::mat& mu, const arma::cube& tau);
RcppExport SEXP _GDPSamp_prob(SEXP dataSEXP, SEXP betaSEXP, SEXP LSEXP, SEXP muSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(prob(data, beta, L, mu, tau));
    return rcpp_result_gen;
END_RCPP
}
// sample_mu_tau_gdp_c
Rcpp::List sample_mu_tau_gdp_c(const arma::mat& data1, const arma::mat& data2, const arma::mat& data3, const arma::mat& data4, const arma::mat& data5, const arma::mat& data6, const arma::mat& data7, const arma::mat& data8, const arma::vec& z1, const arma::vec& z2, const arma::vec& z3, const arma::vec& z4, const arma::vec& z5, const arma::vec& z6, const arma::vec& z7, const arma::vec& z8, const int& L, const int& nu, const arma::mat& W, const arma::colvec& prior_mean, const double& prior_prec);
RcppExport SEXP _GDPSamp_sample_mu_tau_gdp_c(SEXP data1SEXP, SEXP data2SEXP, SEXP data3SEXP, SEXP data4SEXP, SEXP data5SEXP, SEXP data6SEXP, SEXP data7SEXP, SEXP data8SEXP, SEXP z1SEXP, SEXP z2SEXP, SEXP z3SEXP, SEXP z4SEXP, SEXP z5SEXP, SEXP z6SEXP, SEXP z7SEXP, SEXP z8SEXP, SEXP LSEXP, SEXP nuSEXP, SEXP WSEXP, SEXP prior_meanSEXP, SEXP prior_precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data1(data1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data2(data2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data3(data3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data4(data4SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data5(data5SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data6(data6SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data7(data7SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data8(data8SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z1(z1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z2(z2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z3(z3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z4(z4SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z5(z5SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z6(z6SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z7(z7SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z8(z8SEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type prior_mean(prior_meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type prior_prec(prior_precSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_mu_tau_gdp_c(data1, data2, data3, data4, data5, data6, data7, data8, z1, z2, z3, z4, z5, z6, z7, z8, L, nu, W, prior_mean, prior_prec));
    return rcpp_result_gen;
END_RCPP
}
// log_l
double log_l(const arma::mat& data, const arma::vec& beta, const Rcpp::IntegerVector& z, const arma::mat& mu, const arma::cube& tau);
RcppExport SEXP _GDPSamp_log_l(SEXP dataSEXP, SEXP betaSEXP, SEXP zSEXP, SEXP muSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(log_l(data, beta, z, mu, tau));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GDPSamp_mean_my_vec_c", (DL_FUNC) &_GDPSamp_mean_my_vec_c, 1},
    {"_GDPSamp_ss_my_c", (DL_FUNC) &_GDPSamp_ss_my_c, 1},
    {"_GDPSamp_sample_mu_tau_c", (DL_FUNC) &_GDPSamp_sample_mu_tau_c, 7},
    {"_GDPSamp_Mahalanobis", (DL_FUNC) &_GDPSamp_Mahalanobis, 3},
    {"_GDPSamp_dmvnorm_my", (DL_FUNC) &_GDPSamp_dmvnorm_my, 4},
    {"_GDPSamp_multi_normal", (DL_FUNC) &_GDPSamp_multi_normal, 5},
    {"_GDPSamp_sample_my", (DL_FUNC) &_GDPSamp_sample_my, 1},
    {"_GDPSamp_sample_z_c", (DL_FUNC) &_GDPSamp_sample_z_c, 5},
    {"_GDPSamp_prob", (DL_FUNC) &_GDPSamp_prob, 5},
    {"_GDPSamp_sample_mu_tau_gdp_c", (DL_FUNC) &_GDPSamp_sample_mu_tau_gdp_c, 21},
    {"_GDPSamp_log_l", (DL_FUNC) &_GDPSamp_log_l, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_GDPSamp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
